- hosts: dut
  gather_facts: no
  connection: local
  vars:
    state: present
    ansible_ssh_user: centos
  tags:
    - packages
    - upload
  roles:
    - ansible-nfvis
  tasks:
    - name: Limit to specific package
      set_fact:
        nfvis_package_list: "{{ nfvis_package_list | selectattr('name', 'equalto', package) | list }}"
      when: package is defined

    - name: Package
      nfvis_package:
        host: "{{ ansible_host }}"
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        file: "{{ nfvis_package_dir }}/{{ item.name }}.tar.gz"
        name: "{{ item.name }}"
        state: "{{ item.state | default(state) }}"
        dest: "/data/intdatastore/uploads"
      register: upload_results
      loop: "{{ nfvis_package_list }}"

- hosts: dut
  connection: local
  gather_facts: no
  vars:
    state: present
    snake_tag: snake
    max_vnf: 255
    ansible_ssh_user: centos
  roles:
    - ansible-nfvis
  tags:
    - facts
  tasks:
  - name: Get NFVIS facts
    nfvis_facts:
      host: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
    register: nfvis_facts

  - set_fact:
      total_vcpus_available: "{{ nfvis_facts['cpu-info']['total-logical-cpus'] - total_vcpus_used | int }}"
    vars:
      total_vcpus_used: "{{ nfvis_facts['cpu-info']['logical-cpus-used-by-system'] + nfvis_facts['cpu-info']['logical-cpus-used-by-vnfs'] | int }}"

#  - debug:
#      var: nfvis_facts

  - set_fact:
      num_snakes: "{{ total_vcpus_available|int if total_vcpus_available|int < max_vnf|int else  max_vnf|int }}"

  - debug:
      msg: "{{ total_vcpus_available }} VCPUs available. Building {{ num_snakes }} VNF snake test"

  - name: Add VNF to inventory
    add_host:
      name: "{{ snake_tag }}{{ item }}"
      group: snake_test
      vnf_number: "{{ item }}"
      vnf_total: "{{ num_snakes }}"
    with_sequence: start=1 end="{{ num_snakes }}"

  - name: Build Bridges
    nfvis_bridge:
      host: "{{ ansible_host }}"
      user: "{{ nfvis_user }}"
      password: "{{ nfvis_password }}"
      name: "{{ item.key }}"
      port: "{{ item.value.port | default(omit) }}"
      state: "{{ state }}"
    register: results
    with_dict: "{{ nfvis_bridges | default({}) }}"

  - name: Build Networks
    nfvis_network:
      host: "{{ ansible_host }}"
      user: "{{ ansible_user }}"
      password: "{{ ansible_password }}"
      name: "{{ item.key }}"
      bridge: "{{ item.value.bridge }}"
      trunk: "{{ item.value.trunk | default(omit) }}"
      vlan: "{{ item.value.vlan | default(omit) }}"
      state: "{{ state }}"
    register: results
    with_dict: "{{ nfvis_networks | default({}) }}"
    

- hosts: snake_test
  connection: local
  gather_facts: no
  roles:
    - ansible-nfvis
  vars:
    snake_tag: snake
    mgmt_bridge: 'wan-br'
    test_south_net: test-lan
    #north_net: test-wan
    #south_net: test-lan
    north_cidr: "{{ test_wan_cidr }}"
    south_cidr: "{{ test_lan_cidr }}"
    vnf_image: isrv_16.09.01a_noll
    vnf_flavor: isrv-small
    vnf_template: ios/cli.j2
    state: present
    ansible_ssh_user: centos
  tasks:
    - name: Calculate north-net (all but first)
      set_fact:
        north_net: "{{ snake_tag }}-net{{ vnf_number|int - 1 }}"
        north_cidr: "{{ test_cidr_block | ipsubnet(24, vnf_number|int - 1) }}"
      when: vnf_number|int > 1

    - name: Calculate north-net (first)
      set_fact:
        north_net: test-wan
        north_cidr: "{{ test_wan_cidr | ipaddr(2) }}"
      when: vnf_number|int == 1

    - name: Calculate south-net (all but last)
      set_fact:
        south_net: "{{ snake_tag }}-net{{ vnf_number }}"
        south_cidr: "{{ test_cidr_block | ipsubnet(24, vnf_number) }}"
      when: vnf_number != vnf_total

    - name: Calculate south-net (last)
      set_fact:
        south_net: test-lan
        south_cidr: "{{ test_lan_cidr | ipaddr(2) }}"
      when: vnf_number == vnf_total

    - name: Calculate network addresses
      set_fact:
        south_route: "{{ south_cidr | ipaddr(2) }}"
        north_ip: "{{ test_cidr_block | ipsubnet(24, vnf_number|int - 1) | ipaddr(2) }}"
        north_gateway: "{{ test_cidr_block | ipsubnet(24, vnf_number|int - 1) | ipaddr(1) }}"

    - name: Calculate North Address (first)
      set_fact:
        north_ip: "{{ north_cidr | ipaddr(2) }}"
        north_gateway: "{{ north_cidr | ipaddr(1) }}"
      when: vnf_number|int == 1

    - name: Calculate South address
      set_fact:
        south_ip: "{{ south_cidr | ipaddr(1) }}"
      when: vnf_number != vnf_total

    - name: Calculate South address (last snake)
      set_fact:
        south_ip: "{{ south_cidr | ipaddr(2) }}"
      when: vnf_number == vnf_total


#    - debug:
#        msg: "{{ vnf_number }}/{{ vnf_total }} vnf: {{ inventory_hostname }}, north_net: {{ north_net }}, south_net: {{ south_net }}, south_cidr: {{ south_cidr }}"

    - name: Build snake bridges
      nfvis_bridge:
        host: "{{ hostvars['dut'].ansible_host }}"
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        name: "{{ south_net }}_br"
        state: "{{ state }}"
      register: results
      when: south_net != test_south_net

    - name: Build snake networks
      nfvis_network:
        host: "{{ hostvars['dut'].ansible_host }}"
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        name: "{{ south_net }}"
        bridge: "{{ south_net }}_br"
        state: "{{ state }}"
      register: results
      when: south_net != test_south_net

    - set_fact:
        interfaces:
          GigabitEthernet2:
            enabled: true
            ip:
              primary: "{{ north_ip }}"
              gateway: "{{ north_gateway | ipaddr('address') }}"

          GigabitEthernet3:
            enabled: true
            ip:
              primary: "{{ south_ip }}"
        router:
          ospf:
            id: 1
            router_id: "{{ north_ip }}"
            default_information_originate: true
            networks:
              - network: "{{ north_cidr }}"
                area: 0
              - network: "{{ south_cidr }}"
                area: 0

#    - set_fact:
#        static_routes:
#          global:
#            - network: "{{ dest_lan_cidr }}"
#              fwd_list:
#                - fwd: "{{ south_route }}"
#      when: vnf_number < vnf_total
#
#    - debug:
#        var: static_routes
#      when: vnf_number < vnf_total

#    - copy:
#        content: "{{ lookup('template', 'ios/cli.j2') }}"
#        dest: "{{ snake_tag }}-{{ vnf_number }}.cfg"

    - name: Build snake VNFs
      nfvis_deployment:
        host: "{{ hostvars['dut'].ansible_host }}"
        user: "{{ ansible_user }}"
        password: "{{ ansible_password }}"
        name: "{{ snake_tag }}-{{ vnf_number }}"
        timeout: 60
        state: "{{ state }}"
        image: "{{ vnf_image }}"
        flavor: "{{ vnf_flavor }}"
        interfaces:
          - network: int-mgmt-net
          - network: "{{ north_net }}"
          - network: "{{ south_net }}"
        bootup_time: 600
        port_forwarding:
          - proxy_port: "{{ 21000 + vnf_number|int }}"
            source_bridge: "{{ mgmt_bridge }}"
        config_data:
          - dst: iosxe_config.txt
            data: "{{ lookup('template', 'ios/nfvis.j2') }}"
      register: deployment_results
      until: "'OK' in deployment_results.response"
      retries: 6
      delay: 10